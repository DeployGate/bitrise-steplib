format_version: 1.1.0
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git

app:
  envs:
  - AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
  - AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
  - S3_UPLOAD_BUCKET: $S3_UPLOAD_BUCKET
  - S3_UPLOAD_BUCKET_REGION: $S3_UPLOAD_BUCKET_REGION

workflows:
  full_audit:
    title: Full Audit
    description: Performs a full audit on the collection.
    steps:
    - path::./handlers/audit:

  pr_audit:
    title: Pull Request audit
    description: Performs an audit only on the changed step.yml files, and on the related Steps.
    steps:
    - path::./handlers/step-info:
    - path::./handlers/generate-specs:
    - path::./handlers/audit:

  deploy:
    title: Deploy
    description: Deploys the StepLib to Amazon S3
    before_run:
    - full_audit
    steps:
    - path::./handlers/step-info:
    - path::./handlers/generate-specs:
    - path::./handlers/deploy:

  # deploy:
  #   title: Workflow for deployment
  #   description: |-
  #     Deploys the StepLib to Amazon S3
  #   envs:
  #     - AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
  #     - AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
  #     - S3_UPLOAD_BUCKET_REGION: $S3_UPLOAD_BUCKET_REGION
  #     - S3_UPLOAD_BUCKET: $S3_UPLOAD_BUCKET
  #     - BITRISE_WORKFLOW_ID: "DEPLOY"
  #   before_run:
  #   - full_audit
  #   after_run:
  #   - _notifications
  #   steps:
  #   - script:
  #       title: Check spec.json - exist?
  #       inputs:
  #       - content: |-
  #           #!/usr/bin/env bash
  #           if [[ ! -f "${SPEC_JSON_PATH}" ]] ; then
  #             echo " [!] spec.json does not exist at path: ${SPEC_JSON_PATH}"
  #             exit 1
  #           fi
  #           if [[ ! -f "${SLIM_JSON_PATH}" ]] ; then
  #             echo " [!] slim-spec.json does not exist at path: ${SLIM_JSON_PATH}"
  #             exit 1
  #           fi
  #   - script:
  #       title: Fix steplib_source in spec.json
  #       inputs:
  #       - content: |-
  #           require 'json'

  #           spec_json_pth = ENV['SPEC_JSON_PATH']
  #           puts " -> spec_json_pth: #{spec_json_pth}"
  #           file = File.read(spec_json_pth)
  #           data_hash = JSON.parse(file)

  #           puts " -> original steplib source: #{data_hash['steplib_source']}"
  #           steplib_source_param = ENV['STEPLIB_SOURCE']
  #           puts " -> steplib_source_param: #{steplib_source_param}"
  #           data_hash['steplib_source'] = steplib_source_param
  #           File.write(spec_json_pth, JSON.pretty_generate(data_hash))
  #           puts "DONE - OK"
  #       - runner_bin: ruby
  #   - script:
  #       title: Generate
  #       dependencies:
  #         - manager: brew
  #           name: s3cmd
  #       inputs:
  #       - content: |-
  #           #!/bin/bash
  #           set -ex

  #           bash ./_scripts/deploy/deploy.sh

  #   - script:
  #       title: Upload slim.json
  #       dependencies:
  #         - manager: brew
  #           name: awscli
  #       inputs:
  #       - content: |-
  #           #!/usr/bin/env bash
  #           set -ex

  #           aws s3 cp "${SLIM_JSON_PATH}" "s3://${S3_UPLOAD_BUCKET}/slim-spec.json" --acl public-read
  #           aws s3 cp "${SLIM_JSON_PATH}" "s3://${S3_UPLOAD_BUCKET}/slim-spec.json.gz" --acl public-read --content-encoding gzip

